// Mocks generated by Mockito 5.1.0 from annotations
// in template/test/tests/splash/splash_controller_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:template/src/contracts/compatibility_interface.dart' as _i6;
import 'package:template/src/models/DTO/version_app_res.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeVersionApp_0 extends _i1.Fake implements _i2.VersionApp {}

/// A class which mocks [CompatibilityInterface].
///
/// See the documentation for Mockito's code generation for more information.
class MockCompatibilityInterface extends _i1.Mock
    implements _i6.CompatibilityInterface {
  MockCompatibilityInterface() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.VersionApp> currentVersion(String? platform) =>
      (super.noSuchMethod(Invocation.method(#currentVersion, [platform]),
              returnValue: Future<_i2.VersionApp>.value(_FakeVersionApp_0()))
          as _i4.Future<_i2.VersionApp>);
}
